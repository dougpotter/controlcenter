#!/usr/bin/env ruby

require 'optparse'

options = {}
parser = OptionParser.new do |opts|
  opts.banner = "Usage: script/workflows/clearspring-collect [options]"
  
  opts.on('-s', '--source SOURCE', 'Extract from specified SOURCE only (search-hashed-int/search-hashed-us/share-int/share-us/view-int/view-us, default is to extract all sources)') do |source|
    options[:source] = source
  end
  opts.on('-d', '--date DATE', 'Extract for specified DATE (by default today)') do |date|
    options[:date] = date
  end
  opts.on('-p', '--profile', 'Profile script') do
    options[:profile] = true
  end
end.parse!

all_sources = %w(view-us view-int search-hashed-us search-hashed-int share-us share-int)
if source = options[:source]
  if all_sources.include?(source)
    selected_sources = [source]
  else
    raise OptionParser::ParseError, "Invalid source value: #{source}"
  end
else
  selected_sources = all_sources
end

if date = options[:date]
  unless date =~ /\A\d{8}\Z/
    raise OptionParser::ParseError, "Invalid date value: #{date}"
  end
else
  date = Time.now.strftime('%Y%m%d')
end

require File.expand_path('../../../config/boot',  __FILE__)
require File.expand_path('../../../config/environment',  __FILE__)

# Important: development version of ruote is required (as of Jun 10, 2010)
# since it contains bugfixes and features we rely on.

require 'yaml'
require 'ostruct'
if options[:profile]
  require 'ruby-prof'
end

def debug
  require 'ruby-debug'
  debugger
end

$config = WorkflowParameters.load('workflows/clearspring')

def config
  $config
end

def run(params)
  jobs = []
  params[:selected_sources].each do |data_source|
    jobs << RuoteGlobals.host.launch(:clearspring_hourly_discovery,
      :date => params[:date],
      :data_source => data_source,
      :data_source_path => config.clearspring_root_url,
      :download_root_dir => config.download_root_dir,
      :gzip_root_dir => config.temp_root_dir,
      :http_username => config.clearspring_http_username,
      :http_password => config.clearspring_http_password,
      :s3_bucket => config.s3_bucket,
      :clearspring_pid => config.clearspring_pid,
      :wait => true
    )
  end
  jobs.each do |job|
    job.wait
  end
end

def start_profiling
  RubyProf.measure_mode  = RubyProf::PROCESS_TIME 
  RubyProf.start
end

def stop_profiling
  result = RubyProf.stop
  puts 'Saving graph html view'
  printer = RubyProf::GraphHtmlPrinter.new(result)
  printer.print(File.open('profile-output.html', 'w'), :min_percent => 1)
end

RuoteBootstrap.init_host

params = {:selected_sources => selected_sources, :date => date}
if options[:profile]
  start_profiling
  
  begin
    run(params)
  ensure
    begin
      stop_profiling
    rescue Exception => e
      puts e
    end
  end
else
  run(params)
end

RuoteGlobals.host.print_last_error
