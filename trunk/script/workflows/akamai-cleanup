#!/usr/bin/env ruby

require 'optparse'

options = {}
parser = OptionParser.new do |opts|
  opts.banner = "Usage: script/workflows/akamai-cleanup [options]"
  
  opts.separator ''
  opts.separator 'Action options: (by default, clean up uploaded files over 14 days old)'
  
  opts.on('-g', '--age AGE', 'Specify the age of uploaded files to clean up') do |age|
    options[:age] = age
  end
  
  opts.separator ''
  opts.separator 'Configuration options:'
  
  opts.on('-e', '--environment RAILS_ENV', 'Specify rails environment (development/production/test') do |env|
    ENV['RAILS_ENV'] = env
  end
  opts.on('-c', '--config-file PATH', 'Specify configuration file path (by default, config/workflows/clearspring.yml is used)') do |path|
    options[:config_path] = path
  end
  
  opts.separator ''
  opts.separator 'Debugging options:'
  
  opts.on('--[no-]debug', 'Enable debugging output') do |value|
    options[:debug] = value
  end
  
  opts.separator ''
  opts.separator 'Informational options:'
  
  opts.on('-h', '--help', 'Display this help text') do
    puts opts
    exit
  end
end.parse!

require File.join(File.dirname(__FILE__), '../../config/boot')
require File.join(File.dirname(__FILE__), '../../config/environment')

# 14 days for uploaded files
default_age = 14 * 86400

if value = options[:age]
  begin
    options[:age] = TimeDistanceParser.parse(value)
  rescue ArgumentError => e
    $stderr.puts "Invalid age value: #{value}: #{e.message}"
    exit(3)
  end
else
  options[:age] = default_age
end

require 'find'
require 'fileutils'

def cleanup(dir, age, options={})
  threshold = Time.now - age
  Find.find(dir) do |path|
    if %w(.svn .git).include?(File.basename(path))
      Find.prune
    end
    
    next unless FileTest.file?(path)
    
    mtime = File.stat(path).mtime
    if mtime < threshold
      if options[:debug]
        debug_print("Remove #{path}")
      end
      
      FileUtils.rm(path)
    end
  end
end

def debug_print(msg)
  Workflow.default_logger.debug('akamai-cleanup') { msg }
end

settings = AkamaiExtractWorkflow.configuration(options)
params = settings.to_hash

cleanup(params[:source_dir], options[:age], params)
