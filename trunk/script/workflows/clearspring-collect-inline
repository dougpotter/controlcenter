#!/usr/bin/env ruby

require 'optparse'

options = {}
parser = OptionParser.new do |opts|
  opts.banner = "Usage: script/workflows/clearspring-collect [options]"
  
  opts.separator ''
  opts.separator 'Data source options:'
  
  opts.on('-C', '--channel CHANNEL', 'Extract from specified CHANNEL only (search-hashed-int/search-hashed-us/share-int/share-us/view-int/view-us, default is to extract all channels)') do |source|
    options[:source] = source
  end
  opts.on('-D', '--date DATE', 'Extract for specified DATE (by default today)') do |date|
    options[:date] = date
  end
  opts.on('-H', '--hour HOUR', 'Extract for specified HOUR (by default all hours; 24-hour format: 00-23; multiple hours can be specified separated by commas)') do |hours|
    options[:hours] = hours
  end
  
  opts.separator ''
  opts.separator 'Configuration options:'
  
  opts.on('-e', '--environment RAILS_ENV', 'Specify rails environment (development/production/test') do |env|
    ENV['RAILS_ENV'] = env
  end
  opts.on('-c', '--config-file PATH', 'Specify configuration file path (by default, config/workflows/clearspring.yml is used)') do |path|
    options[:config_path] = path
  end
  opts.on('--http-client CLIENT', 'Use specified http client CLIENT (valid values: curb (default), httpclient, net_http, right_aws, spawn_{curl|wget}[_netrc])') do |client|
    options[:http_client] = client
  end
  opts.on('--s3-client CLIENT', 'Use specified s3 client CLIENT (valid values: right_aws (default), spawn_curl') do |client|
    options[:s3_client] = client
  end
  opts.on('--[no-]system-timer', 'Force the use of SystemTimer instead of Timeout') do |value|
    options[:system_timer] = value
  end
  
  opts.separator ''
  opts.separator 'Behavior modifying options:'
  
  opts.on('-l', '--[no-]lock', 'Use locking and quit without doing anything if resources are busy') do |value|
    options[:lock] = value
  end
  opts.on('-o', '--[no-]once', 'Extract each file only if it had not been previously extracted (requires and implies --lock)') do |value|
    options[:once] = options[:lock] = value
  end
  
  opts.separator ''
  opts.separator 'Action options: (by default, discover and extract discovered files)'
  
  opts.on('-I', '--discover', 'Discover files only') do
    options[:discover] = true
  end
  opts.on('-E', '--extract URL', 'Extract file in URL') do |url|
    options[:extract] = url
  end
  
  opts.separator ''
  opts.separator 'Debugging options:'
  
  opts.on('-p', '--[no-]profile', 'Profile script') do |value|
    options[:profile] = value
  end
  opts.on('-d', '--[no-]debug', 'Enable debugging output') do |value|
    options[:debug] = value
  end
  opts.on('--debug-output PATH', 'Store debug output into a file instead of printing it to standard output') do |path|
    options[:debug_output_path] = path
  end
  opts.on('--[no-]keep-downloaded', 'Do not delete downloaded files after successful upload') do |value|
    options[:keep_downloaded] = value
  end
  opts.on('--[no-]keep-temporary', 'Do not delete temporary files after they are no longer needed') do |value|
    options[:keep_temporary] = value
  end
  opts.on('-v', '--[no-]verify', 'Verify split/recompressed gzip files against original archives') do |value|
    options[:verify] = value
  end
  
  opts.separator ''
  opts.separator 'Informational options:'
  
  opts.on('-h', '--help', 'Display this help text') do
    puts opts
    exit
  end
end.parse!

if options[:discover] && options[:extract]
  raise OptionParser::ParseError, "--discover and --extract cannot be specified simultaneously"
end

all_sources = %w(view-us view-int search-hashed-us search-hashed-int share-us share-int)
if source = options[:source]
  if all_sources.include?(source)
    selected_sources = [source]
  else
    raise OptionParser::ParseError, "Invalid source value: #{source}"
  end
else
  selected_sources = all_sources
end

if date = options[:date]
  unless date =~ /\A\d{8}\Z/
    raise OptionParser::ParseError, "Invalid date value: #{date}"
  end
else
  date = Time.now.strftime('%Y%m%d')
end

require File.join(File.dirname(__FILE__), '../../config/boot')
require File.join(File.dirname(__FILE__), '../../config/environment')

if options[:hours]
  begin
    options[:hours] = Workflow.parse_hours_specification(options[:hours])
  rescue ArgumentError => e
    raise OptionParser::ParseError, e.message
  end
end

if options[:profile]
  require 'ruby-prof'
end

def debug
  require 'ruby-debug'
  debugger
end

$settings = ClearspringExtractWorkflow::Configuration.new(options)
$settings.update(options)

def settings; $settings end

class ClearspringExtractWorkflowRunner < WorkflowRunner
  def perform(ext_params)
    versions = ext_params[:selected_sources].map do |data_source|
      {:data_source => data_source}
    end
    if ext_params[:hours]
      versions.map! do |version|
        ext_params[:hours].map do |hour|
          version.merge(:hour => hour)
        end
      end.flatten!
    end
    workflows = versions.map do |version_params|
      params = settings.merge(ext_params).to_hash
      params.update(version_params)
      params[:update_process_status] = true
      ClearspringExtractWorkflow.new(params)
    end
    
    if ext_params[:extract] && workflows.length > 1
      workflow = workflows.detect do |workflow|
        workflow.should_download_url?(ext_params[:extract])
      end
      if workflow
        workflows = [workflow]
      else
        raise Workflow::FileSpecMismatch, "File url does not match any channel/input parameters"
      end
    end
    
    workflows.each do |workflow|
      if ext_params[:discover]
        script_str = 'clearspring-discover'
      else
        script_str = 'clearspring-extract'
      end
      params_str = workflow.date
      if workflow.hour
        params_str += '-%02d00' % workflow.hour
      end
      ProcessStatus.set(:script => script_str, :params => params_str) do
        if ext_params[:discover]
          files = workflow.discover
          files.each do |file|
            puts file
          end
        elsif ext_params[:extract]
          workflow.extract(ext_params[:extract])
        else
          workflow.run
        end
      end
    end
  end
  
  def handle_exception(exc)
    case exc
    when Workflow::FileAlreadyExtracted
      report_error("Error: file is already extracted")
      5
    when Workflow::FileExtractionInProgress
      report_error("Error: file extraction is in progress")
      6
    when Workflow::FileSpecMismatch
      report_error("Error: file does not match specification given")
      7
    when Workflow::FileNotReady
      report_error("Error: file is not ready to be extracted")
      8
    when HttpClient::HttpError
      report_error("Transfer error: #{exc.message} @ #{exc.url}")
      9
    when HttpClient::BaseError
      forward_unhandled_exception(exc, :message => "Unhandled transfer error: #{exc.message} @ #{exc.url}")
      10
    else
      super
    end
  end
end

def start_profiling
  RubyProf.measure_mode  = RubyProf::PROCESS_TIME 
  RubyProf.start
end

def stop_profiling
  result = RubyProf.stop
  puts 'Saving graph html view'
  printer = RubyProf::GraphHtmlPrinter.new(result)
  printer.print(File.open('profile-output.html', 'w'), :min_percent => 1)
end

if options[:system_timer]
  require 'force_system_timer'
end

params = {
  :selected_sources => selected_sources,
  :date => date,
}

%w(
  discover extract lock once keep_downloaded keep_temporary verify
  hours debug debug_output_path http_client
).each do |key|
  key = key.to_sym
  params[key] = options[key]
end

runner = ClearspringExtractWorkflowRunner.new

if options[:profile]
  start_profiling
  
  begin
    status = runner.run(settings.merge(params).to_hash)
  ensure
    begin
      stop_profiling
    rescue Exception => e
      status = ConsoleUi.handle_unhandled_exception(e)
    end
  end
else
  begin
    status = runner.run(settings.merge(params).to_hash)
  rescue Exception => e
    status = ConsoleUi.handle_unhandled_exception(e)
  end
end

exit(status)
