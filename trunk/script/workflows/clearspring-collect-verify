#!/usr/bin/env ruby

require 'optparse'

options = {}
parser = OptionParser.new do |opts|
  opts.banner = "Usage: script/workflows/clearspring-verify [options]"
  
  opts.separator ''
  opts.separator 'Data source options:'
  
  opts.on('-C', '--channel CHANNEL', 'Verify files from specified CHANNEL only (search-hashed-int/search-hashed-us/share-int/share-us/view-int/view-us, default is to verify all channels)') do |source|
    options[:source] = source
  end
  opts.on('-D', '--date DATE', 'Verify files with specified DATE (by default today)') do |date|
    options[:date] = date
  end
  opts.on('-H', '--hour HOUR', 'Verify files with specified HOUR (by default all hours; 24-hour format: 00-23; multiple hours can be specified separated by commas)') do |hours|
    options[:hours] = hours
  end
  
  opts.separator ''
  opts.separator 'Configuration options:'
  
  opts.on('-c', '--config-file PATH', 'Specify configuration file path (by default, config/workflows/clearspring.yml is used)') do |path|
    options[:config_path] = path
  end
  opts.on('--http-client CLIENT', 'Use specified http client CLIENT (valid values: curb (default), httpclient, net_http, right_aws, spawn_{curl|wget}[_netrc])') do |client|
    options[:http_client] = client
  end
  opts.on('--[no-]system-timer', 'Force the use of SystemTimer instead of Timeout') do |value|
    options[:system_timer] = value
  end
  
  opts.separator ''
  opts.separator 'Action options: (by default, check everything except for --check-content)'
  
  opts.on('--check-correspondence', 'Check whether each file in data source has one or more corresponding files in our storage') do
    options[:check_listing] = true
  end
  opts.on('--check-their-existence', 'Checks whether data source appears to have the expected assortment of files') do
    options[:check_their_existence] = true
  end
  opts.on('--check-our-existence', 'Checks whether our storage appears to have the expected assortment of files') do
    options[:check_our_existence] = true
  end
  opts.on('--check-existence', 'Shortcut for --check-their-existence and --check-our-existence together') do
    options[:check_their_existence] = true
    options[:check_our_existence] = true
  end
  opts.on('--check-consistency', 'Smarter union of --check-correspondence and --check-existence: checks whether expected files exist and whether we retrieved all of them') do
    options[:check_consistency] = true
  end
  opts.on('--check-sizes', 'Use with --check-correspondence or --check-consistency; in addition to matching files require that data source and our storage file sizes are similar (allow differences due to different compression levels)') do
    options[:check_sizes] = true
  end
  opts.on('--check-sizes-strictly', 'Like --check-sizes, but tolerate a much smaller difference in sizes assuming data source files were split or recompressed with the same compression level') do
    options[:check_sizes_strictly] = true
  end
  opts.on('--check-content', "In addition to matching files, require that data source and our storage files' content is identical. Warning: performs extreme amount of network I/O since it has to download both data source and our storage copies of all affected files!") do
    options[:check_content] = true
  end
  
  opts.separator ''
  opts.separator 'Debugging options:'
  
  opts.on('-d', '--[no-]debug', 'Enable debugging output') do |value|
    options[:debug] = value
  end
  
  opts.separator ''
  opts.separator 'Informational options:'
  
  opts.on('-h', '--help', 'Display this help text') do
    puts opts
    exit
  end
end.parse!

all_sources = %w(view-us view-int search-hashed-us search-hashed-int share-us share-int)
if source = options[:source]
  if all_sources.include?(source)
    selected_sources = [source]
  else
    raise OptionParser::ParseError, "Invalid source value: #{source}"
  end
else
  selected_sources = all_sources
end

if date = options[:date]
  unless date =~ /\A\d{8}\Z/
    raise OptionParser::ParseError, "Invalid date value: #{date}"
  end
else
  date = Time.now.strftime('%Y%m%d')
end

unless options[:check_listing] || options[:check_consistency] ||
  options[:check_our_existence] || options[:check_their_existence]
then
  options[:check_listing] = options[:check_consistency] =
    options[:check_our_existence] = options[:check_their_existence] = true
end

require File.join(File.dirname(__FILE__), '../../config/boot')
require File.join(File.dirname(__FILE__), '../../config/environment')

if options[:hours]
  begin
    options[:hours] = Workflow.parse_hours_specification(options[:hours])
  rescue ArgumentError => e
    raise OptionParser::ParseError, e.message
  end
end

def debug
  require 'ruby-debug'
  debugger
end

require 'strict_hash'

$settings = ClearspringExtractWorkflow::Configuration.new(options)

def settings; $settings end

def run(ext_params)
  versions = ext_params[:selected_sources].map do |data_source|
    {:data_source => data_source}
  end
  if ext_params[:hours]
    versions.map! do |version|
      ext_params[:hours].map do |hour|
        version.merge(:hour => hour)
      end
    end.flatten!
  end
  workflows = versions.map do |version_params|
    params = settings.merge_user_options(ext_params)
    params.update(version_params)
    options = StrictHashWithIndifferentAccess.new(params)
    options.optional_keys(:hour)
    options[:update_process_status] = false
    ClearspringVerifyWorkflow.new(options)
  end
  
  workflows.each do |workflow|
    if ext_params[:check_listing]
      workflow.check_listing
    elsif ext_params[:check_consistency]
      workflow.check_consistency
    else
      if ext_params[:check_our_existence]
        workflow.check_our_existence
      end
      if ext_params[:check_their_existence]
        workflow.check_their_existence
      end
    end
  end
  
  0
rescue Workflow::FileAlreadyExtracted
  $stderr.puts("Error: file is already extracted")
  5
rescue Workflow::FileExtractionInProgress
  $stderr.puts("Error: file extraction is in progress")
  6
rescue Workflow::FileSpecMismatch
  $stderr.puts("Error: file does not match specification given")
  7
rescue Workflow::FileNotReady
  $stderr.puts("Error: file is not ready to be extracted")
  8
rescue HttpClient::BaseError => e
  $stderr.puts("Network error: #{e.message} @ #{e.url}")
  9
end

if options[:system_timer]
  require 'force_system_timer'
end

params = {
  :selected_sources => selected_sources,
  :date => date,
}

%w(
  check_listing check_consistency check_our_existence check_their_existence
  hours debug http_client
).each do |key|
  key = key.to_sym
  params[key] = options[key]
end

status = run(params)
exit(status)
